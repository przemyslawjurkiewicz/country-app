{"version":3,"sources":["serviceWorker.js","actions/actions-countries.js","reducers/countries-reducer.js","reducers/index.js","DevTools.js","store/index.js","presentational/navigation.component.js","presentational/home.component.js","presentational/contact.component.js","presentational/not-found.component.js","presentational/flag.component.js","presentational/flag-list.component.js","containers/flag-container.component.js","presentational/country-details.component.js","containers/country-detail-container.component.js","containers/continents-container.component.js","routes.js","index.js"],"names":["Boolean","window","location","hostname","match","GET_COUNTRIES","GET_COUNTRY","DELETE_COUNTRY","SEARCH_COUNTRIES","SET_CONTINENT","getCountries","type","deleteCountry","id","searchCountries","searchText","setContinent","name","initialState","countries","countriesData","selectedCountry","visibleCountries","countriesReducer","state","arguments","length","undefined","action","Object","assign","find","country","foundCountries","filter","toLowerCase","includes","notDeletedCountries","notDeletedVisibleCountries","continentCountries","continent","reducers","combineReducers","createDevTools","react_default","a","createElement","redux_devtools_dock_monitor_lib_default","toggleVisibilityKey","changePositionKey","redux_devtools_log_monitor_lib_default","store","createStore","DevTools","instrument","Navigation","props","className","es","to","children","Home","Contact","NotFound","CountryFlag","src","imageUrl","alt","CountryFlagList","map","key","flag_component","onClick","bind","CountryFlagContainer","this","dispatch","event","target","value","onChange","search","flag_list_component","Component","connect","CountryDetails","populace","capital","currency","CountryDetailsContainer","params","country_details_component","ContinentsContainer","_this","e","chooseContinent","routes","path","component","render","react_redux_es","history","hashHistory","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6712ac5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const GET_COUNTRIES = 'GET_COUNTRIES';\r\nexport const GET_COUNTRY = 'GET_COUNTRY';\r\nexport const DELETE_COUNTRY = 'DELETE_COUNTRY';\r\nexport const SEARCH_COUNTRIES = 'SEARCH_COUNTRIES';\r\nexport const SET_CONTINENT = 'SET_CONTINENT';\r\n\r\nexport function getCountries() {\r\n    return {\r\n        type: GET_COUNTRIES\r\n    }\r\n}\r\n\r\nexport function getCountry(id) {\r\n    return {\r\n        type: GET_COUNTRY,\r\n        id\r\n    }\r\n}\r\n\r\nexport function deleteCountry(id) {\r\n    return {\r\n        type: DELETE_COUNTRY,\r\n        id\r\n    }\r\n}\r\n\r\nexport function searchCountries(searchText) {\r\n    return {\r\n        type: SEARCH_COUNTRIES,\r\n        searchText\r\n    }\r\n}\r\n\r\nexport function setContinent(name) {\r\n    return {\r\n        type: SET_CONTINENT,\r\n        name\r\n    }\r\n}","import { GET_COUNTRIES, GET_COUNTRY, SEARCH_COUNTRIES, DELETE_COUNTRY, SET_CONTINENT } from '../actions/actions-countries';\r\nimport countriesData from '../data/countries.json';\r\n\r\nconst initialState = {\r\n    countries: countriesData,\r\n    selectedCountry: {},\r\n    visibleCountries: countriesData\r\n};\r\n\r\nconst countriesReducer = function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_COUNTRIES:\r\n            return Object.assign({}, state, { countries: state.countries });\r\n\r\n        case GET_COUNTRY:\r\n            const selectedCountry = state.countries.find(country => country.id === action.id);\r\n            return Object.assign({}, state, { selectedCountry });\r\n\r\n        case SEARCH_COUNTRIES:\r\n            const foundCountries = state.countries.filter(country => country.name.toLowerCase().includes(action.searchText.toLowerCase()));\r\n            return Object.assign({}, state, { visibleCountries: foundCountries });\r\n\r\n        case DELETE_COUNTRY:\r\n            const notDeletedCountries = state.countries.filter(country => country.id !== action.id);\r\n            const notDeletedVisibleCountries = state.visibleCountries.filter(country => country.id !== action.id);\r\n            return Object.assign({}, state, { countries: notDeletedCountries, visibleCountries: notDeletedVisibleCountries });\r\n\r\n        case SET_CONTINENT:\r\n            const continentCountries = state.countries.filter(country => country.continent === action.name);\r\n            return Object.assign({}, state, { visibleCountries: continentCountries });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default countriesReducer;","import { combineReducers } from 'redux';\r\nimport countriesReducer from './countries-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    countriesReducer\r\n});\r\n\r\nexport default reducers;","import React from 'react';\r\nimport { createDevTools } from 'redux-devtools';\r\nimport LogMonitor from 'redux-devtools-log-monitor';\r\nimport DockMonitor from 'redux-devtools-dock-monitor';\r\n\r\nexport default createDevTools(\r\n  <DockMonitor toggleVisibilityKey='ctrl-h'\r\n               changePositionKey='ctrl-q'>\r\n    <LogMonitor />\r\n  </DockMonitor>\r\n);","import { createStore } from 'redux';\r\nimport reducers from '../reducers/index';\r\nimport DevTools from '../DevTools';\r\n\r\nconst store = createStore(reducers, DevTools.instrument());\r\n\r\nexport default store;","import React from 'react';\r\nimport { Link } from 'react-router';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/css/bootstrap-theme.css';\r\nimport '../country.css';\r\n\r\nconst Navigation = props => (\r\n    <div>\r\n        <nav className=\"navbar navbar-default\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"navbar-header\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">Państwa.js</Link>\r\n                </div>\r\n                <div className=\"collapse navbar-collapse\">\r\n                    <ul className=\"nav navbar-nav\">\r\n                        <li><Link to=\"/countries\">Countries</Link></li>\r\n                        <li><Link to=\"/continents\">Continents</Link></li>\r\n                        <li><Link to=\"/contact\">Contact</Link></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        <div className=\"container-fluid\">\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport '../country.css';\r\n\r\nconst Home = () => (\r\n    <h1>Witamy w aplikacji państwa.js</h1>\r\n);\r\n\r\nexport default Home;","import React from 'react';\r\nimport '../country.css';\r\n\r\nconst Contact = () => (\r\n    <h1>Ulica: Route 66</h1>\r\n);\r\n\r\nexport default Contact;","import React from 'react';\r\nimport '../country.css';\r\n\r\n\r\nconst NotFound = () => (\r\n    <h1>Error 404...podana strona nie istnieje</h1>\r\n);\r\n\r\nexport default NotFound","import React from 'react';\r\n\r\nconst CountryFlag = (props) => (\r\n    <div className=\"country-logo-wrapper\">\r\n        <img className=\"country-logo\" src={props.country.imageUrl} alt=\"country flag\" />\r\n    </div>\r\n);\r\n\r\nexport default CountryFlag;","import React from 'react';\r\nimport { Link } from 'react-router';\r\nimport CountryFlag from '../presentational/flag.component';\r\n\r\nconst CountryFlagList = (props) => (\r\n    <div className=\"countries-list\">\r\n        {props.countries.map(country => {\r\n            return (\r\n                <div className=\"single-country\" key={country.id}>\r\n                    <Link className='logo' to={'countries/country/' + country.id}>\r\n                        <CountryFlag country={country} />\r\n                    </Link>\r\n                    <button onClick={props.deleteCountry.bind(null, country.id)}>DELETE</button>\r\n                </div>\r\n            )\r\n        })}\r\n    </div>\r\n);\r\n\r\nexport default CountryFlagList;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CountryFlagList from '../presentational/flag-list.component';\r\nimport { getCountries, searchCountries, deleteCountry } from '../actions/actions-countries';\r\n\r\nclass CountryFlagContainer extends Component {\r\n  \r\n  componentDidMount() {\r\n    this.props.dispatch(getCountries());\r\n    this.props.dispatch(searchCountries(''));\r\n  }\r\n\r\n  search(event) {\r\n    this.props.dispatch(searchCountries(event.target.value));\r\n  }\r\n\r\n  deleteCountry(id) {\r\n    this.props.dispatch(deleteCountry(id));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"search text-center\">\r\n          <input type=\"text\" onChange={this.search.bind(this)}/>\r\n        </div>\r\n        <CountryFlagList countries={this.props.visibleCountries} deleteCountry={this.deleteCountry.bind(this)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = function (store) {\r\n  return {\r\n    countries: store.countriesReducer.countries,\r\n    visibleCountries: store.countriesReducer.visibleCountries\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CountryFlagContainer);","import React from 'react';\r\n\r\nconst CountryDetails = (props) => (\r\n    <div className=\"country-wrapper\">\r\n        <header>\r\n            <img className=\"country-photo\" src={props.country.imageUrl} alt=\"country flag\" />\r\n        </header>\r\n        <div className=\"country-info\">\r\n            <h1>{props.country.name}</h1>\r\n            <h2>Kontynent: {props.country.continent}</h2>\r\n\r\n            <div className=\"info\">\r\n                <div>\r\n                    <span>{props.country.populace}</span>\r\n                    <span>Ludność[mln]</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{props.country.capital}</span>\r\n                    <span>Stolica</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>{props.country.currency}</span>\r\n                    <span>Waluta</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default CountryDetails;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCountry } from '../actions/actions-countries';\r\nimport CountryDetails from '../presentational/country-details.component';\r\n\r\nclass CountryDetailsContainer extends Component {\r\n   \r\n    componentDidMount() {\r\n        this.props.dispatch(getCountry(this.props.params.id));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <CountryDetails country={this.props.selectedCountry} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = function (store) {\r\n    return {\r\n        selectedCountry: store.countriesReducer.selectedCountry\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CountryDetailsContainer);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setContinent, deleteCountry} from '../actions/actions-countries';\r\nimport CountryFlagList from '../presentational/flag-list.component';\r\n\r\n\r\nclass ContinentsContainer extends Component {\r\n    \r\n    chooseContinent(event) {\r\n        this.props.dispatch(setContinent(event.target.value))\r\n    }\r\n\r\n    deleteCountry(id) {\r\n        this.props.dispatch(deleteCountry(id));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dispatch(setContinent('Europa'));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <select onChange={e => this.chooseContinent(e)}>\r\n                    <option value=\"Europa\">Europa</option>\r\n                    <option value=\"Afryka\">Afryka</option>\r\n                </select>\r\n                <CountryFlagList countries={this.props.visibleCountries} deleteCountry={this.deleteCountry.bind(this)} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = function (store) {\r\n    return {\r\n        visibleCountries: store.countriesReducer.visibleCountries\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContinentsContainer);","import React from 'react';\r\nimport { Route, IndexRoute } from 'react-router';\r\nimport Navigation from './presentational/navigation.component';\r\nimport Home from './presentational/home.component';\r\nimport Contact from './presentational/contact.component';\r\nimport NotFound from './presentational/not-found.component';\r\nimport CountryFlagContainer from './containers/flag-container.component';\r\nimport CountryDetailsContainer from './containers/country-detail-container.component';\r\nimport ContinentsContainer from './containers/continents-container.component';\r\n\r\n\r\nexport default (\r\n    <Route path='/' component={Navigation}>\r\n        <IndexRoute component={Home}/>\r\n        <Route path='countries' >\r\n            <IndexRoute component={CountryFlagContainer}/>\r\n            <Route path='country/:id' component={CountryDetailsContainer}/>\r\n        </Route>\r\n        <Route path='continents' component={ContinentsContainer}/>\r\n        <Route path='contact' component={Contact}/>\r\n        <Route path='*' component={NotFound}/>\r\n    </Route>\r\n);","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Router, hashHistory } from 'react-router';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nimport { getCountries } from './actions/actions-countries';\r\nimport routes from './routes';\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <div>\r\n            <Router history={hashHistory} routes={routes}/>                \r\n            \r\n        </div>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nstore.dispatch(getCountries());\r\n"],"sourceRoot":""}